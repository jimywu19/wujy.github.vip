<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimywu&#39;s Hugo Site</title>
    <link>https://blog.wujy.vip/</link>
    <description>Recent content on Jimywu&#39;s Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-Hans</language>
    <lastBuildDate>Mon, 23 May 2022 15:37:40 +0800</lastBuildDate><atom:link href="https://blog.wujy.vip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Loki</title>
      <link>https://blog.wujy.vip/grafana/loki/</link>
      <pubDate>Mon, 23 May 2022 15:37:40 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/grafana/loki/</guid>
      <description>loki 原理     loki 和 es 最大的不同是 loki 只对标签进行索引而不对内容索引
loki处理日志的模式和prometheus一致，具体如下：
prometheus：
 相同标签对应的是一个流 prometheus 处理 series 的模式。 prometheus 中标签一致对应的同一个 hash 值和 refid(正整数递增的 id)，也就是同一个 series时序数据不断的 append 追加到这个 memseries 中。 当有任意标签发生变化时会产生新的 hash 值和 refid，对应新的 series  loki
 loki 一组标签值会生成一个 stream 日志随着时间的递增会追加到这个 stream 中，最后压缩为 chunk 当有任意标签发生变化时会产生新的 hash 值，对应新的stream  动态标签：说白了就是标签的 value 不固定
高基数标签：说白了就是标签的 value 可能性太多了，达到 10 万，100 万甚至更多</description>
    </item>
    
    <item>
      <title>ExploreGrama</title>
      <link>https://blog.wujy.vip/grafana/exploregrama/</link>
      <pubDate>Mon, 23 May 2022 14:34:26 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/grafana/exploregrama/</guid>
      <description>一、loki数据源 Explore your logs     从loglabels选择器中选择一个log流，可以在查询区域写这样的stream selector
普通查询 {job=&amp;quot;default/promethues&amp;quot;}
组合查询 {app=&amp;quot;cassandra&amp;quot;,namespace=&amp;quot;prod&amp;quot;}
过滤查询 {app=&amp;quot;cassandra&amp;quot;} |~ &amp;quot;(duration|latency)s*(=|is|of)s*[d.]+&amp;quot;
{app=&amp;quot;cassandra&amp;quot;} |= &amp;quot;exact match&amp;quot;
{app=&amp;quot;cassandra&amp;quot;} != &amp;quot;do not match&amp;quot;
{filename=&amp;quot;/var/log/tns-app.log&amp;quot;} #普通查询
{filename=&amp;quot;/var/log/tns-app.log&amp;quot;} |= &amp;quot;error&amp;quot; #使用过滤器表达式查询
{job=&amp;quot;varlogs&amp;quot;} #普通查询
{job=~”apache|syslog”} #多job匹配查询
Grafana displays all logs within the log file of the sample application. The height of each bar encodes the number of logs that were generated at that time. Grafana 会显示示例应用的所有logs，柱状条的高度代表我们在某个时间产生的日志数量。
二、promethues数据源 Explore your metrics（ ad-hoc queries)     tns_request_duration_seconds_count press Shift + Enter</description>
    </item>
    
    <item>
      <title>Awk</title>
      <link>https://blog.wujy.vip/posts/awk/</link>
      <pubDate>Fri, 20 May 2022 16:53:39 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/posts/awk/</guid>
      <description>这个来解释下
ss -n |awk &amp;#39;/^tcp/ {++S[$NF]} END {for (a in S) print a, S[a]}&amp;#39;   /^tcp/ 正则表达式，匹配行首以tcp开始
  NF 列数
  $NF 最后一列的值，一般是IP地址
  S[$NF] 下标为具体IP地址的数组,值是数量
  ++$[$NF] 会把每个IP出现的次数统计出来
  for (a in S) 这里a取得是S这个数组的下标，就是IP
  S[a] 也就是统计的数量
  </description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://blog.wujy.vip/python/python/</link>
      <pubDate>Fri, 20 May 2022 11:06:47 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/python/python/</guid>
      <description>===
 本手册是 Python cheat sheet 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com) 编译：ucasFL  目录      常规 数值类类型 数据结构 函数 控制流 面向对象编程 常见字符串操作 异常处理 列表、字典以及元组的推导表达式 单元测试  常规      Python 对大小写敏感 Python 的索引从 0 开始 Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号  获取帮助      获取主页帮助：help() 获取函数帮助：help(str.replace) 获取模块帮助：help(re)  模块(库)     Python的模块只是一个简单地以 .py 为后缀的文件。
 列出模块内容：dir(module1) 导入模块：import module 调用模块中的函数：module1.func1()   注：import语句会创建一个新的命名空间(namespace)，并且在该命名空间内执行.</description>
    </item>
    
    <item>
      <title>A_bit_of_python</title>
      <link>https://blog.wujy.vip/python/a_bit_of_python/</link>
      <pubDate>Fri, 20 May 2022 11:06:26 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/python/a_bit_of_python/</guid>
      <description>0. 前言     A Bite of Python，也可叫作“咬一口Python”，寓意着Python的冰山一角，包含着作者这几年学Python时积累的一些知识和经验，文章中包含了许多快速简洁的例子，方便让读者了解到Python中存在的一些概念，然后去自行拓展。
1. 基础     Python是一门解释型的高级编程语言，由Guido van Rossum于1989年开始编写，并在1991年发布了第一版。Python的特点是代码简洁而且可读性强，使用空格缩进来划分代码块。
1.0 安装     用浏览器访问官网的下载页面Download Python，选择合适的版本下载安装。
命令行安装：
Mac:
$ brew install python3 Debian&amp;amp;Ubuntu:
$ sudo apt-get install python3 1.1 解释器     Python的官方解释器是CPython，也就是我们通常讨论的Python的实现，它是用C编写的，负责将编写好的Python代码翻译并执行。
除此之外，Python还有许多实现版本：
 PyPy，用rPython实现的Python解释器，使用了JIT编译技术，因此执行速度通常比C实现的CPython还要快。 Jython，一个用Java实现的Python解释器。 IronPython，一个用.NET实现的Python解释器。  1.2 语法     1.2.0 缩进     不同于一些语言使用花括号的方式来明确代码块，Python用缩进来表示代码的层级（通常是四个空格，最好不要用tab）
x = 75 if x &amp;gt;= 60:  if x &amp;gt; 80:  print(&amp;#39;A&amp;#39;)  else:  print(&amp;#39;B&amp;#39;) else:  print(&amp;#39;C&amp;#39;) # 75 1.</description>
    </item>
    
    <item>
      <title>Python_cheat_sheet</title>
      <link>https://blog.wujy.vip/python/python_cheat_sheet/</link>
      <pubDate>Fri, 20 May 2022 11:05:57 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/python/python_cheat_sheet/</guid>
      <description>Comprehensive Python Cheatsheet     Download text file, Buy PDF, Fork me on GitHub or Check out FAQ. Contents       1. Collections:   List, Dictionary, Set, Tuple, Range, Enumerate, Iterator, Generator.
  2. Types:   Type, String, Regular_Exp, Format, Numbers, Combinatorics, Datetime.
  3. Syntax:   Args, Inline, Closure, Decorator, Class, Duck_Type, Enum, Exception.
  4. System:   Exit, Print, Input, Command_Line_Arguments, Open, Path, OS_Commands.</description>
    </item>
    
    <item>
      <title>MarkDown 语法规则参考</title>
      <link>https://blog.wujy.vip/posts/markdown/</link>
      <pubDate>Thu, 19 May 2022 10:33:24 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/posts/markdown/</guid>
      <description>一、标题     # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 效果如下：
这是一级标题     这是二级标题     这是三级标题     这是四级标题     这是五级标题     这是六级标题     二、字体     ### **加粗** #### 要加粗的文字左右分别用两个*号包起来 ### *斜体* #### 要倾斜的文字左右分别用一个*号包起来 ### ***斜体加粗*** #### 要倾斜和加粗的文字左右分别用三个*号包起来 ### ~~删除线~~ #### 要加删除线的文字左右分别用两个~~号包起来 ### `高亮` #### 要加高亮的文字左右分别用两个``号包起来 效果如下：</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://blog.wujy.vip/posts/kafka/</link>
      <pubDate>Thu, 19 May 2022 10:00:55 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/posts/kafka/</guid>
      <description>介绍     一个分布式、分区的、多副本的、多订阅者的基于zookeeper协调的消息队列系统
名词解释      Topic 发布到Kafka集群的消息的类别，类似于数据库的表名 broker 服务器节点 partition topic中的数据分割为一个或多个patition , 至少有一个 producer 生产者 consumer 消费者  常用命令      启动kafaka
bin/kafka-server-start.sh config/server.properties 创建主题
bin/kafka-topics.sh --create --zookeeper hadoop101:2181 --partitions 1 --replication-factor 1 --topic first
bin/kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic first --bootstrap-server 127.0.0.1:9092 查看主题
bin/kafka-topics.sh --list --zookeeper hadoop101:2181 删除主题
bin/kafka-topics.sh --zookeeper hadoop101:2181 --delete --topic first 发送消息
bin/kafka-console-producer.sh --broker-list hadoop101:9092 --topic first 消费消息</description>
    </item>
    
    <item>
      <title>Istio</title>
      <link>https://blog.wujy.vip/posts/istio/</link>
      <pubDate>Thu, 19 May 2022 10:00:24 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/posts/istio/</guid>
      <description>1、其他      HPA VPA  2、Consul     3、Eureka     4、Zipkin     5、微服务架构      dubbo springCloud  6、Knative     serviceless
7、Istio     与Kubernetes紧密结合的适用于云原生场景的Service Mesh形态的用于服务治理的开发平台。
服务治理：
1、连接 智能控制服务之间的调用流量，能够实现灰度升级、AB 测试和红黑部署等功能
2、安全 自动为服务之间的调用提供认证、授权和加密
3、策略执行 应用用户定义的 policy，保证资源在消费者中公平分配
4、可观测性 查看服务运行期间的各种数据，比如日志、监控和 tracing，了解服务的运行情况
 UDPA(Universal Data Plane API)
数据平面标准&amp;mdash;-实例间网络流量 SMI(Service Mesh Interface)
控制平面标准&amp;mdash;-负责生成和部署控制数据平面行为的相关配置
  7.</description>
    </item>
    
    <item>
      <title>BigData</title>
      <link>https://blog.wujy.vip/posts/bigdata/</link>
      <pubDate>Thu, 19 May 2022 09:26:33 +0800</pubDate>
      
      <guid>https://blog.wujy.vip/posts/bigdata/</guid>
      <description>Hadoop     分布式系统基础架构,Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）
HDFS有着高容错性（fault-tolerant）的特点，并且设计用来部署在低廉的（low-cost）硬件上。而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求（requirements）这样可以实现流的形式访问（streaming access）文件系统中的数据
包含的Modules      Hadoop Common: The common utilities that support the other Hadoop modules. Hadoop Distributed File System (HDFS™): A distributed file system that provides high-throughput access to application data. Hadoop YARN: A framework for job scheduling and cluster resource management. Hadoop MapReduce: A YARN-based system for parallel processing of large data sets.</description>
    </item>
    
  </channel>
</rss>
